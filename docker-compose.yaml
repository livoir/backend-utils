version: '3.8'

name: backend

networks:
  reverse-proxy:
    name: reverse-proxy
  observability:
    name: observability
  backend-api:
    name: backend-api

services:
  postgres:
    image: ${PG_IMAGE}
    container_name: postgres
    networks:
      - backend-api
      - observability
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_DB}
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - "./database/postgres/data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    env_file:
      - .env
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "10"
        labels: "postgres"

  redis:
    image: ${REDIS_IMAGE}
    container_name: redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./database/redis/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - backend-api
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "10"
        labels: "redis"

  nginx:
    image: nginx:1.24
    container_name: nginx
    volumes:
      - "./reverse-proxy/nginx:/etc/nginx/conf.d/"
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - reverse-proxy

  jaeger:
    networks:
      - observability
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    volumes:
      - "./observability/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    restart: unless-stopped
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "14250:14250"
      - "14268:14268"
      - "6831:6831/udp"
      - "16686:16686"
      - "16685:16685"

  otel-collector:
    networks:
      - observability
      - backend-api
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    volumes:
      - "./observability/otel-collector/otel-collector-config.yml:/etc/otelcol/otel-collector-collector-config.yml"
    command: --config /etc/otelcol/otel-collector-collector-config.yml
    restart: unless-stopped
    ports:
      - "14278:14278"
      - "8889:8889"
      - "4317:4317"
    depends_on:
      - jaeger

  prometheus:
    networks:
      - observability
      - reverse-proxy
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - "./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./observability/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml"
    ports:
      - "9090:9090"

  grafana:
    networks:
      - observability
      - reverse-proxy
    image: grafana/grafana:10.0.1
    container_name: grafana
    restart: unless-stopped
    volumes:
      - "./observability/grafana:/var/lib/grafana"
    ports:
      - "3000:3000"


  postgres-exporter:
    networks:
      - observability
    image: prometheuscommunity/postgres-exporter:v0.12.1
    container_name: postgresql-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=${PG_EXPORTER_DATA_SOURCE}
    env_file:
      - .env

  loki:
    networks:
      - observability
    image: grafana/loki:main
    container_name: loki
    restart: unless-stopped

  promtail:
    networks:
      - observability
    image: grafana/promtail:main
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./observability/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    env_file:
      - .env

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - observability
    volumes:
      - /proc:/host/proc
      - /sys:/host/sys
      - /:/rootfs

  alert-manager:
    image: prom/alertmanager:latest
    container_name: alert-manager
    restart: unless-stopped
    networks:
      - observability
    volumes:
      - ./observability/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml

  google-pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8085
    ports:
      - "8085:8085"

  keydb:
    image: ${KEYDB_IMAGE}
    container_name: keydb
    command: keydb-server /etc/keydb/keydb.conf
    volumes:
      - ./database/keydb/keydb.conf:/etc/keydb/keydb.conf
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - backend-api
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "10"
        labels: "keydb"

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    volumes:
      - ./tempo/data:/tmp/tempo
    restart: unless-stopped
    networks:
      - observability
    ports:
      - "3200:3200" # Tempo UI/API
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      # "14268:14268" # Jaeger gRPC
      # "9411:9411" # Zipkin